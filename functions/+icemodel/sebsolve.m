function sebsolve(tair, swd, lwd, albedo, wspd, psfc, De, ea, cv_air, ...
      emiss, SB, Tf, chi, roL, scoef, liqflag, xTs, xT, k_eff, dz, solver)

   % This mirrors methods in SEBSOLVE but uses within-timestep nomenclature
   
   figure
   % plot(time, ice1.Tsfc, '-o', 'MarkerFaceColor','auto'); hold on
   plot(time, ice1.Tsfc); hold on
   plot(time, min(Tf, ice1.Tsfc), ':');
   plot(time(iter-48:iter), ice1.Tsfc(iter-48:iter), '-o', 'MarkerFaceColor','auto');

   % scatter(time(iter-48:iter), ice1.Tsfc(iter-48:iter), 'filled')

   % Direct copy out of icemodel, to try fzero instead of fsearchzero
   Test = fzero(@(Tsfc) Qc ...
      + chi * (1.0 - albedo(metiter)) * swd(metiter) ...
      + emiss * (lwd(metiter) - SB * Tsfc ^ 4) ...
      + cv_air * De(metiter) * (tair(metiter) - Tsfc) ...
      * STABLEFN(tair(metiter), Tsfc, wspd(metiter), scoef) ...
      + roL * De(metiter) * (ea - VAPPRESS(Tsfc, Tf, liqflag)) ...
      * epsilon / psfc(metiter) ...
      * STABLEFN(tair(metiter), Tsfc, wspd(metiter), scoef), ...
      [xTs - 50, xTs + 50], fopts)

   % Try newton-rhapson in SFCTEMP
   qc = -k_eff(1) * (xTs - xT(1)) / (dz(1) / 2)
   [Test, flag] = SFCTEMP(tair(metiter), swd(metiter), lwd(metiter), ...
      ea, albedo(metiter), De(metiter), psfc(metiter), wspd(metiter), ...
      cv_air, emiss, SB, Tf, qc, xTs, chi, roL, scoef, fopts, liqflag)


   % In case this is helpful
   fSEB = @(Tsfc) Qc ...
      + chi * (1.0 - albedo(metiter)) * swd(metiter) ...
      + emiss * (lwd(metiter) - SB * Tsfc ^ 4) ...
      + cv_air * De(metiter) * (tair(metiter) - Tsfc) ...
      * STABLEFN(tair(metiter), Tsfc, wspd(metiter), scoef) ...
      + roL * De(metiter) * (ea - VAPPRESS(Tsfc, Tf, liqflag)) ...
      * epsilon / psfc(metiter) ...
      * STABLEFN(tair(metiter), Tsfc, wspd(metiter), scoef)

   % Only CONDUCT gets xTs but Qc is computed at the end of the last step so it
   % is xTs

end

